allprojects {
    apply plugin: 'net.saliman.cobertura'
    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: "java"
    apply plugin: "jacoco"
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = JavaVersion.VERSION_1_8

    repositories {
  		 mavenCentral()
         maven { url "https://repo.spring.io/snapshot" }
         maven { url "https://repo.spring.io/milestone" }
    }

    dependencies {
    	testCompile group: 'junit', name: 'junit', version: '4.12'
    	compile group: 'org.agileware', name: 'smartunit', version: '0.7.0'
		testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: '2.0.7'
		testCompile group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.7'
    	
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testCompile group: 'org.springframework', name: 'spring-test', version: '2.5'
		
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'
        
        testCompile group: 'nl.jqno.equalsverifier', name: 'equalsverifier', version: '3.1.12'
        testCompile group: 'org.meanbean', name: 'meanbean', version: '2.0.3'
        compile group: 'com.google.guava', name: 'guava', version: '28.2-jre'
        compile group: 'org.javassist', name: 'javassist', version: '3.26.0-GA'
        compile('com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.9.3')
        compile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
    }    
    	
	jacoco {
        toolVersion = '0.8.2'
    }
	
    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }
    
    cobertura {
        coverageFormats = ['xml', 'html']
    }
    test.finalizedBy(project.tasks.cobertura)
}

def files = subprojects.collect { new File(it.projectDir, '/build/cobertura/cobertura.ser') }

cobertura {
    coverageFormats = ['xml', 'html']
    coverageSourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    coverageMergeDatafiles = files
}

test.finalizedBy(project.tasks.cobertura)

subprojects.each { project ->
    test.dependsOn(":" + project.name + ":test")
}

tasks.withType(JavaCompile) {
    options.compilerArgs = [
            '-Amapstruct.suppressGeneratorTimestamp=true'
    ]
}